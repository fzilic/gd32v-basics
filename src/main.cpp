#include "LED.hpp"
// #include "ST7920.hpp"
// #include "SSD1306.hpp"
#include "LCDBuiltin.hpp"
#include "systick.hpp"

#include "I2C.hpp"

#include <stdio.h>

#include "u8g2.h"
#include "u8x8.h"

uint8_t cnt = 0;
char dispBuffer[15];

LED::LED led;
LCDBuiltin::LCDBuiltin lcd(LCDBuiltin::BLACK, LCDBuiltin::HORIZONTAL);

// u8g2_t u8g2;
u8x8_t u8x8;
uint8_t tile[8] = {0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0};

I2C::I2C i2c0(I2C_0, I2C::I2CSettings(100000UL));

extern "C" uint8_t u8x8_gpio_and_delay_gd32v(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    switch (msg)
    {
    case U8X8_MSG_GPIO_AND_DELAY_INIT:
        // called once during init phase of u8g2/u8x8
        // can be used to setup pins

        lcd.writeString(24, 0, "- I2C Init      ", LCDBuiltin::WHITE);
        i2c0.init();
        // i2c0.begin();
        break;
    case U8X8_MSG_DELAY_NANO:
        // delay arg_int * 1 nano second
        delayMicroseconds(arg_int == 0 ? 0 : 1);
        break;
    case U8X8_MSG_DELAY_100NANO:
        // delay arg_int * 100 nano seconds
        /* not used at the moment */
        break;
    case U8X8_MSG_DELAY_10MICRO:
        // delay arg_int * 10 micro seconds
        /* not used at the moment */
        break;
    case U8X8_MSG_DELAY_MILLI:
        // delay arg_int * 1 milli second
        delay(arg_int);
        break;
    case U8X8_MSG_DELAY_I2C:
        // arg_int is the I2C speed in 100KHz, e.g. 4 = 400 KHz
        // arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us

        delayMicroseconds(arg_int <= 2 ? 5 : 2);
        break;
    case U8X8_MSG_GPIO_D0:
        // D0 or SPI clock pin: Output level in arg_int
        //case U8X8_MSG_GPIO_SPI_CLOCK:
        break;
    case U8X8_MSG_GPIO_D1:
        // D1 or SPI data pin: Output level in arg_int
        //case U8X8_MSG_GPIO_SPI_DATA:
        break;
    case U8X8_MSG_GPIO_D2:
        // D2 pin: Output level in arg_int
        break;
    case U8X8_MSG_GPIO_D3:
        // D3 pin: Output level in arg_int
        break;
    case U8X8_MSG_GPIO_D4:
        // D4 pin: Output level in arg_int
        break;
    case U8X8_MSG_GPIO_D5:
        // D5 pin: Output level in arg_int
        break;
    case U8X8_MSG_GPIO_D6:
        // D6 pin: Output level in arg_int
        break;
    case U8X8_MSG_GPIO_D7:
        // D7 pin: Output level in arg_int
        break;
    case U8X8_MSG_GPIO_E:
        // E/WR pin: Output level in arg_int
        break;
    case U8X8_MSG_GPIO_CS:
        // CS (chip select) pin: Output level in arg_int
        break;
    case U8X8_MSG_GPIO_DC:
        // DC (data/cmd, A0, register select) pin: Output level in arg_int
        break;
    case U8X8_MSG_GPIO_RESET:
        // Reset pin: Output level in arg_int
        break;
    case U8X8_MSG_GPIO_CS1:
        // CS1 (chip select) pin: Output level in arg_int
        break;
    case U8X8_MSG_GPIO_CS2:
        // CS2 (chip select) pin: Output level in arg_int
        break;
    case U8X8_MSG_GPIO_I2C_CLOCK:
        // arg_int=0: Output low at I2C clock pin
        // arg_int=1: Input dir with pullup high for I2C clock pin
        break;
    case U8X8_MSG_GPIO_I2C_DATA:
        // arg_int=0: Output low at I2C data pin
        // arg_int=1: Input dir with pullup high for I2C data pin
        break;
    case U8X8_MSG_GPIO_MENU_SELECT:
        u8x8_SetGPIOResult(u8x8, /* get menu select pin state */ 0);
        break;
    case U8X8_MSG_GPIO_MENU_NEXT:
        u8x8_SetGPIOResult(u8x8, /* get menu next pin state */ 0);
        break;
    case U8X8_MSG_GPIO_MENU_PREV:
        u8x8_SetGPIOResult(u8x8, /* get menu prev pin state */ 0);
        break;
    case U8X8_MSG_GPIO_MENU_HOME:
        u8x8_SetGPIOResult(u8x8, /* get menu home pin state */ 0);
        break;
    default:
        u8x8_SetGPIOResult(u8x8, 1); // default return value
        break;
    }
    return 1;
}

extern "C" uint8_t u8x8_byte_hw_i2c_gd32v(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    uint32_t address;
    uint32_t address_modified;
    char buffer[20];

    switch (msg)
    {
    case U8X8_MSG_BYTE_SEND:
        // Wire.write((uint8_t *)arg_ptr, (int)arg_int);
        lcd.writeString(24, 0, "I2C Send      ", LCDBuiltin::WHITE);

        if (!i2c0.isTransmitting())
            i2c0.begin();

        address = u8x8_GetI2CAddress(u8x8);
        address_modified = address >> 1;
        // sprintf(buffer, "ADR: %02X %02X %03d", address, address_modified, arg_int);
        // lcd.writeString(24, 16, buffer, LCDBuiltin::WHITE);
        i2c0.transmit(address_modified, (uint8_t *)arg_ptr, arg_int);
        break;
    case U8X8_MSG_BYTE_INIT:
        // Wire.begin();
        lcd.writeString(24, 0, "I2C Begin     ", LCDBuiltin::WHITE);
        i2c0.begin();
        break;
    case U8X8_MSG_BYTE_SET_DC:
        break;
    case U8X8_MSG_BYTE_START_TRANSFER:
        // if (u8x8->display_info->i2c_bus_clock_100kHz >= 4)
        // {
        // Wire.setClock(400000L);
        // }
        // Wire.beginTransmission(u8x8_GetI2CAddress(u8x8) >> 1);
        break;
    case U8X8_MSG_BYTE_END_TRANSFER:
        // Wire.endTransmission();
        lcd.writeString(24, 0, "I2C End       ", LCDBuiltin::WHITE);
        i2c0.end();
        break;
    default:
        return 0;
    }
    return 1;
}

uint8_t data[]{
    0x00, 0xAE, 0x00, 0xD5, 0x80, 0x00, 0xA8, 0x3F,
    0x00, 0xD3, 0x00, 0x00, 0x40, 0x00, 0x8D, 0x14,
    0x00, 0x20, 0x00, 0x00, 0xA1, 0x00, 0xC8, 0x00,
    0xDA, 0x12, 0x00, 0x81, 0xCF, 0x00, 0xD9, 0xF1,
    0x00, 0xDB, 0x40, 0x00, 0x2E, 0x00, 0xA4, 0x00,
    0xA6, 0x00, 0x40, 0x00, 0x10, 0x00, 0xB0, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x10, 0x00, 0xB1, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x10, 0x00, 0xB2, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00,
    0xB3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x10, 0x00, 0xB4, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x10, 0x00, 0xB5, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x10, 0x00, 0xB6, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00,
    0xB7, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xAF, 0x00, 0x40, 0x00, 0x10, 0x00,
    0xB0, 0x40, 0x00, 0x7E, 0x08, 0x08, 0x08, 0x08,
    0x7E, 0x00, 0x00, 0x40, 0x00, 0x10, 0x08, 0xB0,
    0x40, 0x00, 0x38, 0x54, 0x54, 0x54, 0x48, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x11, 0x00, 0xB0, 0x40,
    0x00, 0x00, 0x42, 0x7E, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x11, 0x08, 0xB0, 0x40, 0x00,
    0x00, 0x42, 0x7E, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x12, 0x00, 0xB0, 0x40, 0x00, 0x38,
    0x44, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x12, 0x08, 0xB0, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x13, 0x00, 0xB0, 0x40, 0x00, 0x7E, 0x20, 0x10,
    0x10, 0x20, 0x7E, 0x00, 0x00, 0x40, 0x00, 0x13,
    0x08, 0xB0, 0x40, 0x00, 0x38, 0x44, 0x44, 0x44,
    0x38, 0x00, 0x00, 0x00, 0x40, 0x00, 0x14, 0x00,
    0xB0, 0x40, 0x00, 0x7C, 0x08, 0x04, 0x04, 0x04,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x14, 0x08, 0xB0,
    0x40, 0x00, 0x00, 0x42, 0x7E, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x15, 0x00, 0xB0, 0x40,
    0x00, 0x30, 0x48, 0x48, 0x48, 0x7E, 0x00, 0x00,
    0x00, 0x40, 0x00, 0x11, 0x08, 0xB1, 0x40, 0x00,
    0x7C, 0x12, 0x12, 0x12, 0x12, 0x7C, 0x00, 0x00,
    0x40, 0x00, 0x12, 0x00, 0xB1, 0x40, 0x00, 0x7E,
    0x4A, 0x4A, 0x4A, 0x4A, 0x34, 0x00, 0x00, 0x40,
    0x00, 0x12, 0x08, 0xB1, 0x40, 0x00, 0x3C, 0x42,
    0x42, 0x42, 0x42, 0x24, 0x00, 0x00, 0x40, 0x00,
    0x13, 0x00, 0xB1, 0x40, 0x00, 0x30, 0x48, 0x48,
    0x48, 0x7E, 0x00, 0x00, 0x00, 0x40, 0x00, 0x13,
    0x08, 0xB1, 0x40, 0x00, 0x38, 0x54, 0x54, 0x54,
    0x48, 0x00, 0x00, 0x00, 0x40, 0x00, 0x14, 0x00,
    0xB1, 0x40, 0x00, 0x00, 0x08, 0x7C, 0x0A, 0x02,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x14, 0x08, 0xB1,
    0x40, 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x10, 0x08, 0xB1, 0x40,
    0x0F, 0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0xF0,
    0x00, 0x40, 0x00, 0x11, 0x00, 0xB2, 0x40, 0x0F,
    0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0xF0, 0x00,
    0x40, 0x00, 0x11, 0x08, 0xB3, 0x40, 0x0F, 0x0F,
    0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x40,
    0x00, 0x12, 0x00, 0xB4, 0x40, 0x0F, 0x0F, 0x0F,
    0x0F, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x40, 0x00,
    0x12, 0x08, 0xB5, 0x40, 0x0F, 0x0F, 0x0F, 0x0F,
    0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x40, 0x00, 0x13,
    0x00, 0xB6, 0x40, 0x0F, 0x0F, 0x0F, 0x0F, 0xF0,
    0xF0, 0xF0, 0xF0};

int main(void)
{
    // initialize devices
    led.init();
    lcd.init();

    led.set(LED::RED);
    lcd.clear();

    delay(500);
    led.set(LED::GREEN);

    // lcd.writeString(24, 0, (char *)"This is a TEST", LCDBuiltin::WHITE);
    // lcd.writeString(24, 16, (char *)"This is a TEST", LCDBuiltin::BLUE);
    lcd.writeString(24, 32, (char *)"This is a TEST", LCDBuiltin::RED);
    lcd.writeString(24, 48, (char *)"This is a TEST", LCDBuiltin::MAGENTA);

    // ST7920 lcdExtern(
    //     SPI(
    //         SPIPort(SPI2, RCU_GPIOB, RCU_SPI2, GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, NULL),
    //         SPISettings(SPIEndianess::MSB, SPIMode::MODE3, SPIPrescale::PSC_256)),
    //     GPIO(PB9, GPIOMode::MODE_OUT_PP));

    // lcdExtern.writeText(ST7920_LINE0, (char *)"Hello");
    // lcdExtern.writeText(ST7920_LINE1 + 4, (char *)"world");

    lcd.writeString(24, 0, "u8x8 Setup    ", LCDBuiltin::WHITE);
    u8x8_Setup(&u8x8, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, u8x8_byte_hw_i2c_gd32v, u8x8_gpio_and_delay_gd32v);

    lcd.writeString(24, 0, "u8x8 Init     ", LCDBuiltin::WHITE);
    u8x8_InitDisplay(&u8x8);

    lcd.writeString(24, 0, "u8x8 CD       ", LCDBuiltin::WHITE);
    u8x8_ClearDisplay(&u8x8);

    lcd.writeString(24, 0, "u8x8 Set PS    ", LCDBuiltin::WHITE);
    u8x8_SetPowerSave(&u8x8, 0);

    u8x8_SetFont(&u8x8, u8x8_font_chroma48medium8_r);
    u8x8_DrawString(&u8x8, 0, 0, "Hello World");
    u8x8_DrawString(&u8x8, 3, 1, "ABCdefg");
    u8x8_DrawTile(&u8x8, 1, 1, 1, tile);
    u8x8_DrawTile(&u8x8, 2, 2, 1, tile);
    u8x8_DrawTile(&u8x8, 3, 3, 1, tile);
    u8x8_DrawTile(&u8x8, 4, 4, 1, tile);
    u8x8_DrawTile(&u8x8, 5, 5, 1, tile);
    u8x8_DrawTile(&u8x8, 6, 6, 1, tile);

    // u8g2_Setup_ssd1306_i2c_128x64_noname_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c_gd32v, u8x8_gpio_and_delay_gd32v);
    // u8g2_InitDisplay(&u8g2);
    // u8g2_SetPowerSave(&u8g2, 0);

    // u8g2_FirstPage(&u8g2);
    // do
    // {
    //     u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
    //     u8g2_DrawStr(&u8g2, 0, 15, "Hello World!");
    // } while (u8g2_NextPage(&u8g2));

    // lcd.writeString(24, 0, "I2C Init      ", LCDBuiltin::WHITE);
    // i2c0.init();
    // lcd.writeString(24, 0, "I2C Begin     ", LCDBuiltin::WHITE);
    // i2c0.begin();
    // lcd.writeString(24, 0, "I2C Send      ", LCDBuiltin::WHITE);
    // // i2c0.transmit(0x3D, data, sizeof(data));
    // for (uint32_t i = 0; i < sizeof(data); i++)
    // {
    //     i2c0.transmit(0x3C, data[i]);
    // }

    delay(500);

    while (1)
    {
        led.set(LED::MAGENTA);
        sprintf(dispBuffer, "Cnt:       %03d", cnt);
        lcd.writeString(24, 64, dispBuffer, LCDBuiltin::WHITE);
        // lcdExtern.writeText(ST7920_LINE0, dispBuffer);
        cnt++;
        delay(200);

        led.set(LED::BLACK);
        sprintf(dispBuffer, "Cnt:       %03d", cnt);
        lcd.writeString(24, 64, dispBuffer, LCDBuiltin::WHITE);
        // lcdExtern.writeText(ST7920_LINE0, dispBuffer);
        cnt++;
        delay(200);
    }
}